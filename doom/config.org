#+TITLE: Doom emacs config
#+PROPERTY: header-args :tangle config.el


* General Settings
** User Identity
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+begin_src emacs-lisp
(setq user-full-name "Galih Wicaksono"
      user-mail-address "galihwicaksono90@gmail.com")
#+end_src
** Font Settings
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two.

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Cascadia Code" :size 13)
      doom-variable-pitch-font (font-spec :family "Cascadia Code" :size 13))

(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

** Line Number Settings
This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+begin_src emacs-lisp
(setq display-line-numbers-type `relative)
#+end_src

** Theme Settings
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:

#+begin_src emacs-lisp
(setq doom-theme 'doom-oceanic-next)
#+end_src

* Org-mode Settings
** Default Directory
If you use `org' and don't want your org files in the default location below,
change `org-directory'. It must be set before org loads!

#+begin_src emacs-lisp
(setq org-directory "~/Documents/org/")
(setq org-agenda-files "~/Documents/org/todos.org")
(setq org-log-done 'time)
#+end_src
** Org-Superstar
#+begin_src emacs-lisp
(after! org
  (require 'org-superstar)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src
# * LaTeX Settings
# #+begin_src emacs-lisp
# (after! org
#   (use-package! ox-extra
#     :config
#     (ox-extras-activate '(latex-header-blocks ignore-headlines))))
# (after! org
#   ;; Import ox-latex to get org-latex-classes and other funcitonality
#   ;; for exporting to LaTeX from org
#   (use-package! ox-latex
#     :init
#     ;; code here will run immediately
#     :config
#     ;; code here will run after the package is loaded
#     (setq org-latex-pdf-process
#           '("pdflatex -interaction nonstopmode -output-directory %o %f"
#             "bibtex %b"
#             "pdflatex -interaction nonstopmode -output-directory %o %f"
#             "pdflatex -interaction nonstopmode -output-directory %o %f"))
#     (setq org-latex-with-hyperref nil) ;; stop org adding hypersetup{author..} to latex export
#     ;; (setq org-latex-prefer-user-labels t)

#     ;; deleted unwanted file extensions after latexMK
#     (setq org-latex-logfiles-extensions
#           (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "xmpi" "run.xml" "bcf" "acn" "acr" "alg" "glg" "gls" "ist")))

#     (unless (boundp 'org-latex-classes)
#       (setq org-latex-classes nil)))
# #+end_src
* Major-mode Settings
- Rjsx on js files
    #+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
    #+end_src
* Modules
** Lorem-ipsum
space-i-l to insert lorem ipsum
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("i" . "insert")
       (:prefix ("l" . "Lorem Ipsum")
        :desc "Insert List" "l" #'lorem-ipsum-insert-list
        :desc "Insert Sentence" "s" #'lorem-ipsum-insert-sentences
        :desc "Insert Paragraph" "p" #'lorem-ipsum-insert-paragraphs)))
#+end_src

** Rainbow Mode
#+begin_src emacs-lisp
(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "Toggle Rainbow Mode" "c" #'rainbow-mode))
#+end_src
* lsp-mode
** Go
#+begin_src emacs-lisp
(setq lsp-gopls-staticcheck t)
(setq lsp-eldoc-render-all t)
(setq lsp-gopls-complete-unimported t)
#+end_src
** Typescript
#+begin_src emacs-lisp
;; (setq +format-with-lsp nil)
#+end_src
